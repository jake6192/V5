# init_db.py

from shared.db import get_connection

conn = get_connection()
conn.autocommit = True
c = conn.cursor()

# Drop existing tables
c.execute("""
    DROP TABLE IF EXISTS member_perks CASCADE;
    DROP TABLE IF EXISTS tier_perks CASCADE;
    DROP TABLE IF EXISTS members CASCADE;
    DROP TABLE IF EXISTS perks CASCADE;
    DROP TABLE IF EXISTS tiers CASCADE;
""")

# Rebuild schema
c.execute("""
CREATE TABLE tiers (
    id SERIAL PRIMARY KEY,
    name TEXT,
    color TEXT
)
""")

c.execute("""
CREATE TABLE perks (
    id SERIAL PRIMARY KEY,
    name TEXT,
    reset_period TEXT
)
""")

c.execute("""
CREATE TABLE members (
    id SERIAL PRIMARY KEY,
    member_id INTEGER UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    name TEXT,
    tier_id INTEGER REFERENCES tiers(id),
    sign_up_date TEXT,
    date_of_birth TEXT
)
""")

c.execute("""
CREATE TABLE tier_perks (
    tier_id INTEGER REFERENCES tiers(id),
    perk_id INTEGER REFERENCES perks(id),
    PRIMARY KEY (tier_id, perk_id)
)
""")

c.execute("""
CREATE TABLE member_perks (
    member_id INTEGER REFERENCES members(id),
    perk_id INTEGER REFERENCES perks(id),
    last_claimed TEXT,
    next_reset_date TEXT,
    multiplier INTEGER DEFAULT 1,
    PRIMARY KEY (member_id, perk_id)
)
""")

c.execute("""
    CREATE TABLE IF NOT EXISTS shifts (
    id SERIAL PRIMARY KEY,
    staff TEXT NOT NULL,
    date DATE NOT NULL,
    start TIME NOT NULL,
    "end" TIME NOT NULL,
    venue TEXT NOT NULL DEFAULT 'Kings Langley',
    notes TEXT,
    hours NUMERIC(5,2) NOT NULL
);
""")

# Index for faster lookup in tier_perks
c.execute("""
CREATE INDEX IF NOT EXISTS idx_tierperk_pair ON tier_perks(tier_id, perk_id)
""")


# --- ADDED FOR TABS + STOCK MODULES ---

c.execute("""
CREATE TABLE IF NOT EXISTS stock_items (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    venue TEXT NOT NULL,
    price NUMERIC(6,2) NOT NULL,
    cost_price NUMERIC(6,2),
    total_inventory INTEGER DEFAULT 0,
    description TEXT,
    image_url TEXT
)
""")

c.execute("""
CREATE TABLE IF NOT EXISTS tabs (
    id SERIAL PRIMARY KEY,
    bay_number INTEGER NOT NULL,
    booking_start TIMESTAMP NOT NULL,
    duration_minutes INTEGER DEFAULT 60,
    paid BOOLEAN DEFAULT FALSE,
    paid_at TIMESTAMP DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

c.execute("""
CREATE TABLE IF NOT EXISTS tab_items (
    id SERIAL PRIMARY KEY,
    tab_id INTEGER REFERENCES tabs(id) ON DELETE CASCADE,
    item_id INTEGER REFERENCES stock_items(id),
    quantity INTEGER NOT NULL,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

c.execute("""
CREATE TABLE archived_tabs (
    id SERIAL PRIMARY KEY,
    original_tab_id INTEGER,
    bay_number TEXT,
    booking_start TIMESTAMP,
    duration_minutes INTEGER,
    paid BOOLEAN,
    total NUMERIC,
    paid_at TIMESTAMP DEFAULT NOW()
)
""")

c.execute("""
CREATE TABLE archived_tab_items (
    id SERIAL PRIMARY KEY,
    archived_tab_id INTEGER REFERENCES archived_tabs(id),
    item_id INTEGER,
    item_name TEXT,
    item_price NUMERIC,
    quantity INTEGER
)
""")

c.execute("""
CREATE TABLE IF NOT EXISTS unpaid_losses (
    id SERIAL PRIMARY KEY,
    tab_id INTEGER REFERENCES tabs(id) ON DELETE SET NULL,
    item_id INTEGER REFERENCES stock_items(id),
    quantity INTEGER DEFAULT 0,
    amount NUMERIC(10, 2) NOT NULL,
    deleted_at TIMESTAMP DEFAULT NOW()
);
""")
c.execute("""
    CREATE INDEX IF NOT EXISTS idx_unpaid_losses_deleted_at
    ON unpaid_losses (deleted_at);
""")

print("âœ… PostgreSQL schema initialized successfully.")
conn.close()
