ðŸ§© PART 2: INSTALL AND CONFIGURE ZEROTIER ON BOTH PCS
âœ… 1. Install ZeroTier
Download from: https://www.zerotier.com/download/

Install and run

âœ… 2. Create a virtual network
Go to: https://my.zerotier.com

Sign in â†’ Create Network

Copy the network ID (e.g. 8056c2e21c000001)

âœ… 3. Join the network on both PCs
In terminal (or via GUI):

bash
Copy
Edit
zerotier-cli join <your-network-id>
âœ… 4. Authorize both nodes in the ZeroTier web dashboard
Go to your network

Tick the boxes next to each PC

Youâ€™ll see assigned virtual IPs (e.g., 10.147.20.22 and 10.147.20.33)

âœ… These act like LAN IPs between the two machines.

ðŸ§© PART 3: ADD SYNC LAYER TO YOUR FLASK APP
âœ… 1. Add last_updated column to all synced tables
Example for members:

sql
Copy
Edit
ALTER TABLE members ADD COLUMN last_updated TEXT;
Update your create table logic and DB schema accordingly if not already present.

âœ… 2. Create sync API endpoints
In app.py, add:

python
Copy
Edit
from flask import request
import requests
import time

@app.route('/sync/pull', methods=['GET'])
def sync_pull():
    conn = get_connection()
    try:
        c = conn.cursor()
        c.execute('SELECT * FROM members')  # repeat for other tables
        rows = [dict(r) for r in c.fetchall()]
        return jsonify({'members': rows})
    finally:
        conn.close()

@app.route('/sync/push', methods=['POST'])
def sync_push():
    data = request.get_json()
    conn = get_connection()
    try:
        c = conn.cursor()
        for row in data.get('members', []):
            c.execute('''
                INSERT INTO members (member_id, name, tier_id, sign_up_date, date_of_birth, last_updated)
                VALUES (?, ?, ?, ?, ?, ?)
                ON CONFLICT(member_id) DO UPDATE SET
                  name=excluded.name,
                  tier_id=excluded.tier_id,
                  sign_up_date=excluded.sign_up_date,
                  date_of_birth=excluded.date_of_birth,
                  last_updated=excluded.last_updated
            ''', (
                row['member_id'], row['name'], row['tier_id'],
                row['sign_up_date'], row['date_of_birth'], row['last_updated']
            ))
        conn.commit()
        return ('OK', 200)
    finally:
        conn.close()
âœ… 3. Add background sync job
At the bottom of app.py, before if __name__ == '__main__':, add:

python
Copy
Edit
import threading

def sync_loop():
    peer_ip = '10.x.x.x'  # ZT IP of the other PC
    while True:
        try:
            # PULL
            r = requests.get(f'http://{peer_ip}:5000/sync/pull')
            remote_data = r.json()
            requests.post('http://localhost:5000/sync/push', json=remote_data)
        except Exception as e:
            print("Sync failed:", e)
        time.sleep(60)

threading.Thread(target=sync_loop, daemon=True).start()
Set peer_ip differently on each PC (use the otherâ€™s ZT IP).

ðŸ§© PART 4: FIREWALL ALLOWANCE
âœ… 1. Allow incoming port 5000 (Flask default) through firewall
On both PCs:

Open Windows Defender Firewall

Add inbound rule for port 5000

Allow TCP connections for Private networks only (ZeroTier is private)

ðŸ§© PART 5: TEST AND VERIFY
âœ… 1. Launch Flask app on both PCs
Each app runs independently

Both listen on http://localhost:5000

They sync in the background every 60 seconds

âœ… 2. Modify data on PC1
â†’ It appears on PC2 within 1 minute
â†’ Vice versa